/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import dto.ClienteDTO;
import dto.HorarioDTO;
import dto.MesaDTO;
import dto.ReservaDTO;
import dto.RestauranteDTO;
import entidadesJPA.Horario;
import entidadesJPA.HorarioMesa;
import excepciones.NegocioException;
import excepciones.PersistenciaException;
import interfaces.IAgregarReservaBO;
import interfaces.ICancelarReservaBO;
import interfaces.IClienteBO;
import interfaces.IConsultarReservasBO;
import interfaces.IConsultarTipoMesaBO;
import interfaces.IHorarioBO;
import interfaces.IHorarioMesaBO;
import interfaces.IMesaBO;
import interfaces.IRestauranteBO;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import negocio.AgregarReservaBO;
import negocio.ClienteBO;
import negocio.ConsultarReservasBO;
import negocio.ConsultarTipoMesaBO;
import negocio.HorarioBO;
import negocio.HorarioMesaBO;
import negocio.MesaBO;
import negocio.RestauranteBO;
import utilidades.Forms;

/**
 *
 * @author pauli
 */
public class FormMenu extends javax.swing.JFrame {

    private final IAgregarReservaBO agregarReservaBO;
    private JTable tablaMesas;
    private Long idMesaSeleccionada;
    private final IClienteBO clienteBO;
    private boolean isComboBoxLoaded = false;
    private final IMesaBO mesaBO;
    private final IRestauranteBO restBO;
    private List<RestauranteDTO> listaRestaurantes;
    private Long idRestauranteSeleccionado;
    private final IHorarioBO horariobo;
    private final IConsultarReservasBO reservabo;
    private Long idClienteSeleccionado;
    private List<ClienteDTO> clientes;
    private IHorarioMesaBO horarioMesabo;
    private IConsultarTipoMesaBO consultaTipoMesa;

    /**
     * Creates new form FormMenu
     */
    public FormMenu() {
        initComponents();
        this.setLocationRelativeTo(this);
        this.agregarReservaBO = new AgregarReservaBO();
        this.clienteBO = new ClienteBO();
        this.mesaBO = new MesaBO();
        this.restBO = new RestauranteBO();
        this.horariobo = new HorarioBO();
        this.reservabo = new ConsultarReservasBO();
        this.horarioMesabo = new HorarioMesaBO();
        this.consultaTipoMesa = new ConsultarTipoMesaBO();
        this.SetImageLabel(jLabel3, "src/main/java/Imagenes/logo.png");

        //cargarClientes();
        //cargarMesasEnTabla();
        cargarClientesEnTabla();
        configurarFechas();
//SwingUtilities.invokeLater(() -> new FormMenu().ComboBoxEditableClientes());
        this.cargarRestaurantes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabelaa = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        txtNombre = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        btnLimpiarFiltros = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMesas = new javax.swing.JTable();
        jLabelaa1 = new javax.swing.JLabel();
        bConfirmar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cbCantidad = new javax.swing.JComboBox<>();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        jHora = new javax.swing.JSpinner(sm);
        jLabel8 = new javax.swing.JLabel();
        jFecha = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        cbUbicacion = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnConsultarMesasDisponibles = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        bReservas = new javax.swing.JButton();
        bMesas = new javax.swing.JButton();
        bConsultas = new javax.swing.JButton();
        bReportes = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        bClientes = new javax.swing.JButton();
        bRestaurantes = new javax.swing.JButton();
        bHorarios = new javax.swing.JButton();
        cbRestaurante = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel1.setText("Buscar por Nombre:");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelaa.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabelaa.setText("Nueva Reservaci√≥n para cliente:");
        jLabelaa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setText("Buscar por Telefono:");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel10.setText("Seleccionar cliente:");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblClientes);

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
        });

        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyReleased(evt);
            }
        });

        btnLimpiarFiltros.setText("Limpiar filtros");
        btnLimpiarFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFiltrosActionPerformed(evt);
            }
        });
        btnLimpiarFiltros.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnLimpiarFiltrosKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addComponent(jLabelaa)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtTelefono, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                        .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLimpiarFiltros))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelaa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(btnLimpiarFiltros))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblMesas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mesa", "Ubicaci√≥n", "Capacidad", "Costo"
            }
        ));
        jScrollPane1.setViewportView(tblMesas);

        jLabelaa1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabelaa1.setText("Mesas Disponibles");
        jLabelaa1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bConfirmar.setBackground(new java.awt.Color(255, 51, 153));
        bConfirmar.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        bConfirmar.setText("Reservar");
        bConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConfirmarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel6.setText("Cantidad personas:");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbCantidad.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        cbCantidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8" }));
        cbCantidad.setBorder(null);
        cbCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCantidadActionPerformed(evt);
            }
        });

        JSpinner.DateEditor de = new JSpinner.DateEditor(jHora, "HH:mm");
        jHora.setEditor(de);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel8.setText("Hora:");
        jLabel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jFecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFechaMouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel7.setText("Fecha:");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbUbicacion.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        cbUbicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "General", "Terraza", "Ventana" }));
        cbUbicacion.setBorder(null);
        cbUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUbicacionActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel9.setText("Ubicaci√≥n:");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel11.setText("Seleccionar mesa:");
        jLabel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnConsultarMesasDisponibles.setText("Consultar");
        btnConsultarMesasDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarMesasDisponiblesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(jHora, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnConsultarMesasDisponibles)))
                        .addGap(0, 161, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabelaa1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(bConfirmar)
                                .addGap(8, 8, 8)))))
                .addGap(17, 17, 17))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabelaa1)
                .addGap(21, 21, 21)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cbCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnConsultarMesasDisponibles)))
                .addGap(23, 23, 23)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bConfirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(121, 121, 121))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 51, 153));

        bReservas.setBackground(new java.awt.Color(255, 51, 153));
        bReservas.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bReservas.setText("Reservas");
        bReservas.setBorder(null);
        bReservas.setContentAreaFilled(false);
        bReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReservasActionPerformed(evt);
            }
        });

        bMesas.setBackground(new java.awt.Color(255, 51, 153));
        bMesas.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bMesas.setText("Mesas");
        bMesas.setBorder(null);
        bMesas.setContentAreaFilled(false);
        bMesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMesasActionPerformed(evt);
            }
        });

        bConsultas.setBackground(new java.awt.Color(255, 51, 153));
        bConsultas.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bConsultas.setText("Consultas");
        bConsultas.setBorder(null);
        bConsultas.setContentAreaFilled(false);
        bConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConsultasActionPerformed(evt);
            }
        });

        bReportes.setBackground(new java.awt.Color(255, 51, 153));
        bReportes.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bReportes.setText("Reportes");
        bReportes.setBorder(null);
        bReportes.setContentAreaFilled(false);
        bReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReportesActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        jLabel4.setText(" Amadeustaurant");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bClientes.setBackground(new java.awt.Color(255, 51, 153));
        bClientes.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bClientes.setText("Clientes");
        bClientes.setBorder(null);
        bClientes.setContentAreaFilled(false);
        bClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClientesActionPerformed(evt);
            }
        });

        bRestaurantes.setBackground(new java.awt.Color(255, 51, 153));
        bRestaurantes.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bRestaurantes.setText("Restaurantes");
        bRestaurantes.setBorder(null);
        bRestaurantes.setContentAreaFilled(false);
        bRestaurantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRestaurantesActionPerformed(evt);
            }
        });

        bHorarios.setBackground(new java.awt.Color(255, 51, 153));
        bHorarios.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        bHorarios.setText("Horarios");
        bHorarios.setBorder(null);
        bHorarios.setContentAreaFilled(false);
        bHorarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bHorariosActionPerformed(evt);
            }
        });

        cbRestaurante.setBackground(new java.awt.Color(255, 51, 153));
        cbRestaurante.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        cbRestaurante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Escoge el local" }));
        cbRestaurante.setBorder(null);
        cbRestaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRestauranteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(cbRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(bHorarios)
                .addGap(33, 33, 33)
                .addComponent(bMesas)
                .addGap(18, 18, 18)
                .addComponent(bReservas)
                .addGap(18, 18, 18)
                .addComponent(bConsultas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bReportes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bRestaurantes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bClientes)
                .addGap(212, 212, 212))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bClientes)
                    .addComponent(bRestaurantes)
                    .addComponent(bReportes)
                    .addComponent(bConsultas)
                    .addComponent(bReservas)
                    .addComponent(bMesas)
                    .addComponent(bHorarios)
                    .addComponent(cbRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bMesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMesasActionPerformed
        Forms.cargarForm(new FormMesas(), this);
    }//GEN-LAST:event_bMesasActionPerformed

    private void bReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReservasActionPerformed
        Forms.cargarForm(new FormReservas(), this);
    }//GEN-LAST:event_bReservasActionPerformed

    private void bConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConsultasActionPerformed
        Forms.cargarForm(new FormConsultas(), this);
    }//GEN-LAST:event_bConsultasActionPerformed

    private void bReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReportesActionPerformed
        Forms.cargarForm(new FormReportes(), this);
    }//GEN-LAST:event_bReportesActionPerformed

    private void bConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConfirmarActionPerformed
        try {
            // Verificar si se ha seleccionado un restaurante
            if (idRestauranteSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un restaurante v√°lido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si se ha seleccionado una mesa
            if (this.idMesaSeleccionada == null) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una mesa de la lista.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener los datos del cliente y de la mesa
            int numPersonas = Integer.parseInt((String) cbCantidad.getSelectedItem());
            Date fechaSeleccionada = (Date) jFecha.getDate();
            Date horaSeleccionada = (Date) jHora.getValue();

            // Verificar que se haya seleccionado la fecha y la hora
            if (fechaSeleccionada == null || horaSeleccionada == null) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una fecha y hora para la reserva.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validar que la fecha seleccionada no sea anterior a la fecha actual
            Date fechaActual = new Date();
            if (fechaSeleccionada.before(fechaActual)) {
                JOptionPane.showMessageDialog(this, "La fecha seleccionada no puede ser anterior a la fecha actual.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener el d√≠a de la semana de la fecha seleccionada
            Calendar calendarFecha = Calendar.getInstance();
            calendarFecha.setTime(fechaSeleccionada);
            int diaSemanaNumero = calendarFecha.get(Calendar.DAY_OF_WEEK);
            String diaSemana = convertirDiaSemana(diaSemanaNumero); // M√©todo para convertir a texto

            // Obtener la hora de apertura y cierre seg√∫n el restaurante y el d√≠a de la semana
            Date horaApertura = restBO.obtenerHoraApertura(idRestauranteSeleccionado, diaSemana);
            Date horaCierre = restBO.obtenerHoraCierre(idRestauranteSeleccionado, diaSemana);

            // Combinar fecha y hora seleccionadas
            Calendar calendarHora = Calendar.getInstance();
            calendarHora.setTime(horaSeleccionada);
            calendarFecha.set(Calendar.HOUR_OF_DAY, calendarHora.get(Calendar.HOUR_OF_DAY));
            calendarFecha.set(Calendar.MINUTE, calendarHora.get(Calendar.MINUTE));

            Date fechaHoraFinal = calendarFecha.getTime();

            // Validar la hora seleccionada
            if (!esHoraValida(fechaHoraFinal, horaApertura, horaCierre)) {
                JOptionPane.showMessageDialog(this, "La hora seleccionada debe estar entre el horario de apertura y al menos una hora antes del cierre.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Obtener el costo y los datos del cliente
            BigDecimal costo = mesaBO.obtenerCostoPorIdMesa(this.idMesaSeleccionada);

            // Crear el DTO de reserva
            ReservaDTO reservaDTO = new ReservaDTO(null, fechaHoraFinal, numPersonas, costo, "Reservado", null, BigDecimal.ZERO, idClienteSeleccionado, this.idMesaSeleccionada);
            //Mostrar di√°logo de confirmaci√≥n con los detalles de la reserva
            Forms.cargarForm(new FormDetallesReserva(reservaDTO, idClienteSeleccionado, this.idMesaSeleccionada), this);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al preparar la reserva: " + e.getMessage());
        }
    }//GEN-LAST:event_bConfirmarActionPerformed

    public boolean esHoraValida(Date fechaSeleccionada, Date horaApertura, Date horaCierre) {
        Calendar calSeleccionada = Calendar.getInstance();
        calSeleccionada.setTime(fechaSeleccionada);

        Calendar calApertura = Calendar.getInstance();
        calApertura.setTime(horaApertura);

        Calendar calCierre = Calendar.getInstance();
        calCierre.setTime(horaCierre);

        // Ajustar hora de cierre para que sea una hora antes
        calCierre.add(Calendar.HOUR_OF_DAY, -1);

        // Comparar solo las horas sin tener en cuenta la fecha
        int horaSeleccionada = calSeleccionada.get(Calendar.HOUR_OF_DAY);
        int minutoSeleccionado = calSeleccionada.get(Calendar.MINUTE);

        int horaAperturaInt = calApertura.get(Calendar.HOUR_OF_DAY);
        int minutoAperturaInt = calApertura.get(Calendar.MINUTE);

        int horaCierreInt = calCierre.get(Calendar.HOUR_OF_DAY);
        int minutoCierreInt = calCierre.get(Calendar.MINUTE);

        // Validaci√≥n de que la hora seleccionada est√© dentro del rango permitido
        if ((horaSeleccionada > horaAperturaInt || (horaSeleccionada == horaAperturaInt && minutoSeleccionado >= minutoAperturaInt))
                && (horaSeleccionada < horaCierreInt || (horaSeleccionada == horaCierreInt && minutoSeleccionado < minutoCierreInt))) {
            return true; // Hora v√°lida
        } else {
            return false; // Hora inv√°lida
        }
    }

    
    private void xd() {
        try {
            // Obtener los datos del cliente y de la mesa
            //  String clienteSeleccionado = (String) jComboBoxClientes.getSelectedItem();

            int numPersonas = Integer.parseInt((String) cbCantidad.getSelectedItem());
            Date fechaSeleccionada = (Date) jFecha.getDate();
            Date horaSeleccionada = (Date) jHora.getValue();

            // Combinar fecha y hora
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(fechaSeleccionada);

            Calendar horaCalendar = Calendar.getInstance();
            horaCalendar.setTime(horaSeleccionada);

            calendar.set(Calendar.HOUR_OF_DAY, horaCalendar.get(Calendar.HOUR_OF_DAY));
            calendar.set(Calendar.MINUTE, horaCalendar.get(Calendar.MINUTE));

            Date fechaHoraFinal = calendar.getTime();

            BigDecimal costo = mesaBO.obtenerCostoPorIdMesa(this.idMesaSeleccionada);
            //String nombreCompleto = (String) jComboBoxClientes.getSelectedItem(); // Obtener el nombre completo seleccionado
            //     Long idCliente = clienteBO.obtenerIdClientePorNombre(nombreCompleto); // Obtener el ID del cliente

            //       ReservaDTO reservaDTO = new ReservaDTO(null, fechaHoraFinal, numPersonas, costo, "Reservado", null, BigDecimal.ZERO, idCliente, this.idMesaSeleccionada);
            // Mostrar di√°logo de confirmaci√≥n con los datos del cliente y la mesa
            //    Forms.cargarForm(new FormDetallesReserva(reservaDTO, idCliente, this.idMesaSeleccionada), this);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al preparar la reserva: " + e.getMessage());
        }
    }
    private void bClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClientesActionPerformed
        Forms.cargarForm(new FormClientes(), this);
    }//GEN-LAST:event_bClientesActionPerformed

    private void cbUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUbicacionActionPerformed

    }//GEN-LAST:event_cbUbicacionActionPerformed

    private void cbCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCantidadActionPerformed

    }//GEN-LAST:event_cbCantidadActionPerformed

    private void bRestaurantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRestaurantesActionPerformed
        Forms.cargarForm(new FormCreaRestaurante(), this);
    }//GEN-LAST:event_bRestaurantesActionPerformed

    private void bHorariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bHorariosActionPerformed
        Forms.cargarForm(new FormHorarios(), this);
    }//GEN-LAST:event_bHorariosActionPerformed

    private void cbRestauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRestauranteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRestauranteActionPerformed

    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyReleased
        // TODO add your handling code here:
        filtrarNombre();
    }//GEN-LAST:event_txtNombreKeyReleased

    private void txtTelefonoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyReleased
        filtrarTelefono();
    }//GEN-LAST:event_txtTelefonoKeyReleased

    private void btnLimpiarFiltrosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLimpiarFiltrosKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLimpiarFiltrosKeyReleased

    private void btnLimpiarFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFiltrosActionPerformed
        limpiarFiltros();
    }//GEN-LAST:event_btnLimpiarFiltrosActionPerformed

    private void jFechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFechaMouseClicked
        configurarFechas();
    }//GEN-LAST:event_jFechaMouseClicked

    private void btnConsultarMesasDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarMesasDisponiblesActionPerformed

        try {
            // Verificar si se ha seleccionado un restaurante
            if (idRestauranteSeleccionado == null) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione un restaurante.", "Error", JOptionPane.WARNING_MESSAGE);
                return; // Salir del m√©todo si no hay restaurante seleccionado
            }

            // Verificar si jFecha y jHora est√°n seleccionados
            if (jFecha.getDate() == null) {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una fecha.", "Error", JOptionPane.WARNING_MESSAGE);
                return; // Salir del m√©todo si no hay fecha
            }

            // Si todos los campos son v√°lidos, cargar las mesas
            cargarMesasEnTabla();
        } catch (PersistenciaException ex) {
            Logger.getLogger(FormMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnConsultarMesasDisponiblesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClientes;
    private javax.swing.JButton bConfirmar;
    private javax.swing.JButton bConsultas;
    private javax.swing.JButton bHorarios;
    private javax.swing.JButton bMesas;
    private javax.swing.JButton bReportes;
    private javax.swing.JButton bReservas;
    private javax.swing.JButton bRestaurantes;
    private javax.swing.JButton btnConsultarMesasDisponibles;
    private javax.swing.JButton btnLimpiarFiltros;
    private javax.swing.JComboBox<String> cbCantidad;
    private javax.swing.JComboBox<String> cbRestaurante;
    private javax.swing.JComboBox<String> cbUbicacion;
    private com.toedter.calendar.JDateChooser jFecha;
    private javax.swing.JSpinner jHora;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelaa;
    private javax.swing.JLabel jLabelaa1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTable tblMesas;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void SetImageLabel(JLabel labelname, String root) {
        ImageIcon image = new ImageIcon(root);
        Icon icon = new ImageIcon(image.getImage().getScaledInstance(labelname.getWidth(), labelname.getHeight(), Image.SCALE_DEFAULT));
        labelname.setIcon(icon);
        this.repaint();
    }

    private String convertirDiaSemana(int diaSemanaNumero) {
        switch (diaSemanaNumero) {
            case Calendar.SUNDAY:
                return "Domingo";
            case Calendar.MONDAY:
                return "Lunes";
            case Calendar.TUESDAY:
                return "Martes";
            case Calendar.WEDNESDAY:
                return "Mi√©rcoles";
            case Calendar.THURSDAY:
                return "Jueves";
            case Calendar.FRIDAY:
                return "Viernes";
            case Calendar.SATURDAY:
                return "S√°bado";
            default:
                return "";
        }
    }

    private void cargarRestaurantes() {
        try {
            cbRestaurante.removeAllItems(); // Limpiar elementos actuales
            listaRestaurantes = restBO.obtenerRestaurantes(); // Obtener la lista de restaurantes

            cbRestaurante.addItem("Seleccionar restaurante"); // Agregar opci√≥n de selecci√≥n

            // Llenar el JComboBox con las cadenas que deseas mostrar
            for (RestauranteDTO restaurante : listaRestaurantes) {
                String displayText = restaurante.getCiudad() + " - " + restaurante.getDireccion(); // Crear el texto para mostrar
                cbRestaurante.addItem(displayText); // Agregar solo el texto
            }

            // Agregar un ActionListener para detectar la selecci√≥n de un restaurante
            cbRestaurante.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedIndex = cbRestaurante.getSelectedIndex(); // Obtener el √≠ndice seleccionado

                    // Aseg√∫rate de que no se haya seleccionado la opci√≥n de "Seleccionar restaurante"
                    if (selectedIndex > 0) { // Si hay un restaurante seleccionado
                        RestauranteDTO restauranteSeleccionado = listaRestaurantes.get(selectedIndex - 1); // Obtener el objeto correspondiente
                        idRestauranteSeleccionado = restauranteSeleccionado.getId(); // Obtener el ID del restaurante seleccionado
                        System.out.println("ID del restaurante seleccionado: " + idRestauranteSeleccionado);
                        // cargarMesasEnTabla();
                    } else {
                        // Restablecer el ID si se selecciona "Seleccionar restaurante"
                        idRestauranteSeleccionado = null; // O puedes usar un valor predeterminado
                    }
                }
            });

        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al mostrar los restaurantes", "ERROR!", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    // M√©todo para cargar los clientes en una tabla.
    private void cargarClientesEnTabla() {
        try {
            List<ClienteDTO> clientes = clienteBO.obtenerTodosLosClientesConTelefonoDesencriptado(); // Obtiene todos los clientes
            this.clientes = clientes;
            System.out.println("Clientes obtenidos: " + clientes.size());

            if (clientes == null || clientes.isEmpty()) {
                System.out.println("No hay clientes disponibles.");
                return;
            }

            llenarTablaClientes(clientes); // Llama al m√©todo que llena la tabla
        } catch (NegocioException e) {
            System.out.println("Error al cargar clientes: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Error inesperado al cargar clientes: " + e.getMessage());
        }
    }

    // M√©todo para llenar una tabla con la lista de clientes.
    private void llenarTablaClientes(List<ClienteDTO> clientes) {
        try {
            if (clientes == null || clientes.isEmpty()) {
                System.out.println("No hay clientes registrados.");
                return; // Salir si no hay reservas
            }

            // Crear un modelo de tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID Cliente");
            modelo.addColumn("Nombre Completo");
            modelo.addColumn("Tel√©fono");

            // Llenar el modelo con los datos de los clientes
            for (ClienteDTO cliente : clientes) {
                try {
                    if (cliente != null) {
                        Object[] fila = new Object[3];
                        fila[0] = cliente.getIdCliente();
                        fila[1] = cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno();
                        fila[2] = cliente.getTelefono();

                        modelo.addRow(fila);
                    } else {
                        System.out.println("Cliente o mesa no encontrados para ID: " + cliente.getIdCliente());
                    }
                } catch (Exception e) {
                    System.out.println("Error al obtener datos del cliente : " + e.getMessage());
                }
            }

            // Asignar el modelo a la tabla y configurarla
            tblClientes.setModel(modelo);
            tblClientes.setFillsViewportHeight(true);
            jScrollPane2.setViewportView(tblClientes);

            tblClientes.getColumnModel().getColumn(0).setMinWidth(0);
            tblClientes.getColumnModel().getColumn(0).setMaxWidth(0);
            tblClientes.getColumnModel().getColumn(0).setPreferredWidth(0);
            // Agregar un listener para la selecci√≥n de filas

            tblClientes.getSelectionModel().addListSelectionListener(event -> {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = tblClientes.getSelectedRow();
                    if (selectedRow != -1) {
                        String idClienteString = tblClientes.getValueAt(selectedRow, 0).toString(); // Aseg√∫rate de que el ID est√© en la columna correcta
                        Long idCliente = Long.parseLong(idClienteString);
                        guardarIdClienteSeleccionada(idCliente);

                        try {
                            // Obtener la reserva completa usando el ID
                            ClienteDTO cliente = clienteBO.obtenerClientePorId(idCliente);
                            // Llamar al m√©todo para cargar detalles
                            cargarDetallesCliente(cliente);
                        } catch (NegocioException ex) {
                            Logger.getLogger(FormClientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });

        } catch (Exception e) {
            System.out.println("Error inesperado: " + e.getMessage());
        }
    }

    // M√©todo para guardar el ID del cliente seleccionado.
    private void guardarIdClienteSeleccionada(Long idCliente) {
        this.idClienteSeleccionado = idCliente;
    }

    // M√©todo para filtrar la lista de clientes por nombre.
    private void filtrarNombre() {
        String textoBuscar = txtNombre.getText().toLowerCase(); // Convierte a min√∫sculas para comparaci√≥n
        List<ClienteDTO> clientesFiltrados = new ArrayList<>();

        // Filtrar los nombres
        for (ClienteDTO cliente : clientes) {

            if (cliente != null) {
                String nombreCompleto = (cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno()).toLowerCase();
                if (nombreCompleto.contains(textoBuscar)) {
                    clientesFiltrados.add(cliente);
                }
            }
        }

        // Llenar la tabla con las reservas filtradas
        llenarTablaClientes(clientesFiltrados);
    }

    // M√©todo para filtrar clientes por n√∫mero de tel√©fono.
    public void filtrarTelefono() {
        String textoBuscar = txtTelefono.getText();
        List<ClienteDTO> clientesFiltrados = new ArrayList<>();
        for (ClienteDTO cliente : clientes) {
            if (cliente != null) {
                String telefono = cliente.getTelefono();
                if (telefono.contains(textoBuscar)) {
                    clientesFiltrados.add(cliente);
                }
            }
        }

        // Llenar la tabla con las reservas filtradas
        llenarTablaClientes(clientesFiltrados);
    }

    // M√©todo para cargar los detalles de un cliente en los campos de texto.
    private void cargarDetallesCliente(ClienteDTO cliente) {
        try {

            if (cliente != null) {
                txtNombre.setText(cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno());
                txtTelefono.setText(cliente.getTelefono());

            } else {
                JOptionPane.showMessageDialog(this, "No se encontr√≥ el cliente.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M√©todo para limpiar los filtros de b√∫squeda y recargar la tabla de clientes.
    private void limpiarFiltros() {
        // Limpiar campos de texto
        txtNombre.setText("");
        txtTelefono.setText("");

        // Llamar al m√©todo que recarga todas las reservas
        cargarClientesEnTabla();
    }

    private void cargarMesasEnTabla() throws PersistenciaException {
        try {
            // Aseg√∫rar de que idRestauranteSeleccionado no sea nulo
            if (idRestauranteSeleccionado == null) {
                return;
            }
            RestauranteDTO restaurante = restBO.obtenerRestaurantePorId(idRestauranteSeleccionado);
            String ubicacionSeleccionada = cbUbicacion.getSelectedItem().toString();

            List<MesaDTO> mesas = mesaBO.obtenerTodasLasMesas();

            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");

            // Crear un modelo de tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID Mesa");
            modelo.addColumn("Mesa");
            modelo.addColumn("Ubicaci√≥n");
            modelo.addColumn("Capacidad");
            modelo.addColumn("Costo");

            // Llenar el modelo con los datos de las mesas filtradas
            List<MesaDTO> mesasFiltradas = aplicaFiltros(mesas);
            for (MesaDTO mesa : mesasFiltradas) {
                boolean coincideRestaurante = mesa.getIdRestaurante().equals(idRestauranteSeleccionado);

                // Si coincide la ubicaci√≥n, capacidad y restaurante, se agrega a la tabla
                if (coincideRestaurante) {
                    List<HorarioMesa> horariosMesa = horarioMesabo.obtenerHorariosPorMesa(mesa.getIdMesa());
                    StringBuilder diasSemana = new StringBuilder();
                    for (HorarioMesa horarioMesa : horariosMesa) {
                        Horario horario = horarioMesa.getHorario(); // Obtener el objeto Horario
                        if (horario != null) {
                            if (diasSemana.length() > 0) {
                                diasSemana.append(", "); // A√±adir coma si ya hay d√≠as
                            }
                            diasSemana.append(horario.getDiaSemana()); // Concatenar el d√≠a
                        }
                    }
                    // Iterar sobre los horarios asignados al restaurante y crear una fila para cada d√≠a

                    Object[] fila = new Object[5];

                    fila[0] = mesa.getIdMesa();
                    fila[1] = mesa.getCodigoMesa();
                    fila[2] = mesa.getUbicacion();
                    fila[3] = mesa.getCapacidad();
                    fila[4] = mesaBO.obtenerCostoPorIdMesa(mesa.getIdMesa());

                    modelo.addRow(fila);

                }
            }

            // Crear la JTable con el modelo
            //tblMesas = new JTable(modelo);
            //tblMesas.setFillsViewportHeight(true);
            tblMesas.setModel(modelo);
            tblMesas.setFillsViewportHeight(true);
            jScrollPane1.setViewportView(tblMesas);

            tblMesas.getColumnModel().getColumn(0).setMinWidth(0);
            tblMesas.getColumnModel().getColumn(0).setMaxWidth(0);
            tblMesas.getColumnModel().getColumn(0).setPreferredWidth(0);

            // Agregar un listener para la selecci√≥n de filas
            tblMesas.getSelectionModel().addListSelectionListener(event -> {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = tblMesas.getSelectedRow();
                    if (selectedRow != -1) {
                        Long idMesa = (Long) tblMesas.getValueAt(selectedRow, 0);
                        guardarIdMesaSeleccionada(idMesa);
                    }
                }
            });

            // Agregar la JTable al JScrollPane
            jScrollPane1.setViewportView(tblMesas);
        } catch (NegocioException ex) {
            Logger.getLogger(FormMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<MesaDTO> aplicaFiltros(List<MesaDTO> mesas) {
        List<MesaDTO> mesasFiltradas = new ArrayList<>();
        try {
            RestauranteDTO restaurante = restBO.obtenerRestaurantePorId(idRestauranteSeleccionado);
            String ubicacionSeleccionada = (String) cbUbicacion.getSelectedItem();
            String cantidadSeleccionadaStr = (String) cbCantidad.getSelectedItem();
            int cantidadSeleccionada = Integer.parseInt(cantidadSeleccionadaStr);
            List<ReservaDTO> reservas = reservabo.obtenerTodasLasReservas();
            // Obt√©n la fecha y hora seleccionadas
            Date fechaSeleccionada = jFecha.getDate();
            Date horaSeleccionadaDate = (Date) jHora.getValue();
            Calendar calendarHoraSeleccionada = Calendar.getInstance();
            calendarHoraSeleccionada.setTime(horaSeleccionadaDate);
            int horaSeleccionada = calendarHoraSeleccionada.get(Calendar.HOUR_OF_DAY);

            // Crea el rango de horas para la exclusi√≥n (5 horas despu√©s)
            Calendar calendarInicio = Calendar.getInstance();
            calendarInicio.setTime(fechaSeleccionada);
            calendarInicio.set(Calendar.HOUR_OF_DAY, horaSeleccionada);
            calendarInicio.set(Calendar.MINUTE, 0);

            Calendar calendarFin = (Calendar) calendarInicio.clone();
            calendarFin.add(Calendar.HOUR_OF_DAY, 5);

            // Conjunto para almacenar IDs de mesas a excluir
            Set<Long> mesasExcluidas = new HashSet<>();
            for (ReservaDTO reserva : reservas) {
                if (reserva.getEstado().equalsIgnoreCase("Reservada")) {
                    Calendar calendarReserva = Calendar.getInstance();
                    calendarReserva.setTime(reserva.getFechaHora());
                    if (calendarReserva.get(Calendar.YEAR) == calendarInicio.get(Calendar.YEAR)
                            && calendarReserva.get(Calendar.DAY_OF_YEAR) == calendarInicio.get(Calendar.DAY_OF_YEAR)) {

                        // Verifica si la hora de reserva est√° dentro del rango de exclusi√≥n
                        if (calendarReserva.after(calendarInicio) && calendarReserva.before(calendarFin)) {
                            mesasExcluidas.add(reserva.getIdMesa()); // Suponiendo que tienes un m√©todo getIdMesa()
                        }
                    }
                }

            }
            for (MesaDTO mesa : mesas) {
                List<HorarioMesa> horariosMesa = horarioMesabo.obtenerHorariosPorMesa(mesa.getIdMesa());
                String diaSemana = obtenerDiaSemana(fechaSeleccionada);
                boolean puedeSeleccionar = true;
                // Crea un calendar para la hora seleccionada
                Calendar calendarSeleccionada = Calendar.getInstance();
                calendarSeleccionada.setTime(fechaSeleccionada);
                calendarSeleccionada.set(Calendar.HOUR_OF_DAY, horaSeleccionada);
                calendarSeleccionada.set(Calendar.MINUTE, 0);
                for (HorarioMesa horario : horariosMesa) {
                    if (horario.getHorario().getDiaSemana().equalsIgnoreCase(diaSemana)) {
                        Date horaCierre = horario.getHorario().getHoraCierre();

                        // Verifica si falta menos de una hora para la hora de cierre
                        Calendar calendarHoraCierre = Calendar.getInstance();
                        calendarHoraCierre.setTime(horaCierre);
                        calendarHoraCierre.add(Calendar.HOUR_OF_DAY, -1); // Resta una hora

                        if (calendarSeleccionada.after(calendarHoraCierre)) {
                            puedeSeleccionar = false;
                            break;
                        }
                    }
                }
                boolean capacidadAdecuada = false;
                int capacidadMesa = 0;
                String tipoMesa = consultaTipoMesa.obtenerNombreTipoMesaPorIdMesa(mesa.getIdMesa());
                if (cantidadSeleccionada <= 2 && tipoMesa.equalsIgnoreCase("Mesa peque√±a")) {
                    capacidadAdecuada = true;
                } else if (cantidadSeleccionada >= 3 && cantidadSeleccionada <= 4 && tipoMesa.equalsIgnoreCase("Mesa mediana")) {
                    capacidadAdecuada = true;
                } else if (cantidadSeleccionada >= 5 && cantidadSeleccionada <= 8 && tipoMesa.equalsIgnoreCase("Mesa grande")) {
                    capacidadAdecuada = true;
                }

                if (puedeSeleccionar && mesa.getUbicacion().equalsIgnoreCase(ubicacionSeleccionada) && !mesasExcluidas.contains(mesa.getIdMesa()) && capacidadAdecuada) {
                    mesasFiltradas.add(mesa);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(FormMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        return mesasFiltradas;
    }

    private String obtenerDiaSemana(Date fecha) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(fecha);
        String[] dias = {"Domingo", "Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado"};
        return dias[calendar.get(Calendar.DAY_OF_WEEK) - 1];
    }

    private void guardarIdMesaSeleccionada(Long idMesa) {
        this.idMesaSeleccionada = idMesa;
    }

    private void configurarFechas() {
        Calendar calendar = Calendar.getInstance();

        // Establecer la fecha m√≠nima como un d√≠a despu√©s de hoy
        calendar.add(Calendar.DAY_OF_MONTH, 1);
        jFecha.setMinSelectableDate(calendar.getTime());

        // Establecer la fecha m√°xima como un mes a partir de hoy
        calendar = Calendar.getInstance(); // Reinicializa el calendario
        calendar.add(Calendar.MONTH, 1); // Agrega un mes a la fecha actual

        // Ajustar la fecha m√°xima para que sea el mismo d√≠a del mes
        int maxDay = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
        calendar.set(Calendar.DAY_OF_MONTH, maxDay);

        // Si el d√≠a es mayor que el √∫ltimo d√≠a del mes, ajustarlo
        if (calendar.get(Calendar.DAY_OF_MONTH) < maxDay) {
            calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum(Calendar.DAY_OF_MONTH));
        }

        jFecha.setMaxSelectableDate(calendar.getTime());
    }

}

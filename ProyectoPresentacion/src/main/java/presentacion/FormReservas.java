/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import dto.ClienteDTO;
import dto.MesaDTO;
import dto.ReservaDTO;
import dto.RestauranteDTO;
import excepciones.NegocioException;
import excepciones.PersistenciaException;
import interfaces.ICancelarReservaBO;
import interfaces.IClienteBO;
import interfaces.IConsultarReservasBO;
import interfaces.IMesaBO;
import interfaces.IRestauranteBO;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import negocio.CancelarReservaBO;
import negocio.ClienteBO;
import negocio.ConsultarReservasBO;
import negocio.MesaBO;
import negocio.RestauranteBO;
import utilidades.Forms;

/**
 *
 * @author Chris
 */
public class FormReservas extends javax.swing.JFrame {

    private final IConsultarReservasBO reservabo;
    private final ICancelarReservaBO cancelarReservabo;
    private final IClienteBO clientebo;
    private final IMesaBO mesabo;
    private final IRestauranteBO restBO;
    private Long idRestauranteSeleccionado;
    private List<RestauranteDTO> listaRestaurantes;
    private List<ReservaDTO> reservas;
    private Long idReservaSeleccionada;
    private boolean programmaticallySettingDate = false;
    private List<ReservaDTO> reservasFiltradas;

    /**
     * Creates new form FormReservas
     */
    public FormReservas() {
        this.reservabo = new ConsultarReservasBO();
        this.clientebo = new ClienteBO();
        this.mesabo = new MesaBO();
        this.cancelarReservabo = new CancelarReservaBO();
        this.restBO = new RestauranteBO();

        initComponents();
        this.cargarReservasEnTabla();
        this.cargarRestaurantes();

        this.setLocationRelativeTo(this);

        this.SetImageLabel(jLabel3, "src/main/java/Imagenes/logo.png");
        jFecha.addPropertyChangeListener("date", evt -> {
            if (!programmaticallySettingDate) {
                filtrarFecha();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservaciones = new javax.swing.JTable();
        jLabelaa1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jFecha = new com.toedter.calendar.JDateChooser();
        btnCancelarReserva = new javax.swing.JButton();
        btnLimpiarFiltros = new javax.swing.JButton();
        cbRestaurante = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 51, 153));

        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 3, 20)); // NOI18N
        jLabel4.setText(" Amadeustaurant");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(411, 411, 411)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel4)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblReservaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Telefono", "Personas", "Fecha y hora", "Codigo mesa", "Accion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblReservaciones);

        jLabelaa1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabelaa1.setText("Reservaciones Actuales");
        jLabelaa1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtNombre.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
        });

        txtTelefono.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel1.setText("Nombre Completo:");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel5.setText("Telefono:");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel7.setText("Fecha:");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jFecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFechaKeyReleased(evt);
            }
        });

        btnCancelarReserva.setBackground(new java.awt.Color(255, 51, 153));
        btnCancelarReserva.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnCancelarReserva.setText("Cancelar Reserva");
        btnCancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarReservaActionPerformed(evt);
            }
        });

        btnLimpiarFiltros.setBackground(new java.awt.Color(255, 51, 153));
        btnLimpiarFiltros.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnLimpiarFiltros.setText("Limpiar Filtros");
        btnLimpiarFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarFiltrosActionPerformed(evt);
            }
        });

        cbRestaurante.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        cbRestaurante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona restaurante" }));
        cbRestaurante.setBorder(null);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        jLabel10.setText("Restaurante:");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(61, 61, 61)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(65, 65, 65)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addComponent(jLabelaa1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnCancelarReserva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLimpiarFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10)
                            .addComponent(cbRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addGap(2, 2, 2)
                        .addComponent(cbRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarFiltros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelarReserva)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabelaa1)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed

    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        Forms.cargarForm(new FormMenu(), this);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void btnCancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarReservaActionPerformed
        try {
            cancelarReserva();
        } catch (Exception ex) {
            Logger.getLogger(FormReservas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCancelarReservaActionPerformed

    private void txtTelefonoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyReleased
        // TODO add your handling code here:
        filtrarTelefono();
    }//GEN-LAST:event_txtTelefonoKeyReleased

    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyReleased
        filtrarNombre();

    }//GEN-LAST:event_txtNombreKeyReleased

    private void jFechaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFechaKeyReleased

    }//GEN-LAST:event_jFechaKeyReleased

    private void btnLimpiarFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarFiltrosActionPerformed
        limpiarFiltros();
    }//GEN-LAST:event_btnLimpiarFiltrosActionPerformed
    public void filtrarTelefono() {
        String textoBuscar = txtTelefono.getText();
        List<ReservaDTO> reservasFiltradasPorTelefono = new ArrayList<>();
        for (ReservaDTO reserva : reservasFiltradas) {
            ClienteDTO cliente = obtenerClienteSafe(reserva.getIdCliente()); // Usa el método auxiliar
            if (cliente != null) {
                String telefono = cliente.getTelefono();
                if (telefono.contains(textoBuscar)) {
                    reservasFiltradasPorTelefono.add(reserva);
                }
            }
        }

        // Llenar la tabla con las reservas filtradas
        llenarTablaReservas(reservasFiltradasPorTelefono);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarReserva;
    private javax.swing.JButton btnLimpiarFiltros;
    private javax.swing.JComboBox<String> cbRestaurante;
    private com.toedter.calendar.JDateChooser jFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelaa1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReservaciones;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
private void SetImageLabel(JLabel labelname, String root) {
        ImageIcon image = new ImageIcon(root);
        Icon icon = new ImageIcon(image.getImage().getScaledInstance(labelname.getWidth(), labelname.getHeight(), Image.SCALE_DEFAULT));
        labelname.setIcon(icon);
        this.repaint();
    }

    private void cargarRestaurantes() {
        try {
            cbRestaurante.removeAllItems(); // Limpiar elementos actuales
            listaRestaurantes = restBO.obtenerRestaurantes(); // Obtener la lista de restaurantes

            cbRestaurante.addItem("Seleccionar restaurante"); // Agregar opción de selección

            // Llenar el JComboBox con las cadenas que deseas mostrar
            for (RestauranteDTO restaurante : listaRestaurantes) {
                String displayText = restaurante.getCiudad() + " - " + restaurante.getDireccion(); // Crear el texto para mostrar
                cbRestaurante.addItem(displayText); // Agregar solo el texto
            }

            // Agregar un ActionListener para detectar la selección de un restaurante
            cbRestaurante.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int selectedIndex = cbRestaurante.getSelectedIndex(); // Obtener el índice seleccionado

                    // Asegúrar de que no se haya seleccionado la opción de "Seleccionar restaurante"
                    if (selectedIndex > 0) { // Si hay un restaurante seleccionado
                        RestauranteDTO restauranteSeleccionado = listaRestaurantes.get(selectedIndex - 1); // Obtener el objeto correspondiente
                        idRestauranteSeleccionado = restauranteSeleccionado.getId(); // Obtener el ID del restaurante seleccionado
                        System.out.println("ID del restaurante seleccionado: " + idRestauranteSeleccionado);
                        cargarReservasEnTabla();
                    } else {
                        // Restablecer el ID si se selecciona "Seleccionar restaurante"
                        idRestauranteSeleccionado = null; // O puedes usar un valor predeterminado
                    }
                }
            });

        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this, "Error al mostrar los restaurantes", "ERROR!", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void cargarReservasEnTabla() {
        try {
            // Asegúrate de que idRestauranteSeleccionado no sea nulo
            if (idRestauranteSeleccionado == null) {
                return;
            }

            reservas = reservabo.obtenerTodasLasReservas(); // Obtiene todas las reservas

            // Verifica si hay reservas
            if (reservas == null || reservas.isEmpty()) {
                System.out.println("No hay reservas disponibles.");
                return; // Salir si no hay reservas
            }

            // Filtrar reservas usando el método auxiliar
            List<ReservaDTO> reservasFiltradas = reservas.stream()
                    .filter(this::esReservaValida)
                    .collect(Collectors.toList());
            this.reservasFiltradas = reservasFiltradas;
            // Verificar si hay reservas filtradas
            if (reservasFiltradas.isEmpty()) {
                System.out.println("No hay reservas activas disponibles para este restaurante.");
                limpiarTabla(); // Limpia la tabla si no hay reservas activas
                return; // Salir si no hay reservas activas
            }

            // Llama al método para llenar la tabla con las reservas filtradas
            llenarTablaReservas(reservasFiltradas);
        } catch (NegocioException e) {
            System.out.println("Error al cargar reservas: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Error inesperado al cargar reservas: " + e.getMessage());
        }
    }
    // Método para limpiar la tabla

    private void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tblReservaciones.getModel();
        modelo.setRowCount(0); // Elimina todas las filas de la tabla
        System.out.println("La tabla ha sido limpiada.");
    }

    private boolean esReservaValida(ReservaDTO reserva) {
        try {
            Long idRestaurante = mesabo.obtenerIdRestaurantePorIdMesa(reserva.getIdMesa());
            return idRestaurante.equals(idRestauranteSeleccionado) && !"Cancelada".equalsIgnoreCase(reserva.getEstado());
        } catch (NegocioException e) {
            // Manejar la excepción (puedes imprimir un mensaje o simplemente retornar false)
            System.out.println("Error al obtener ID de restaurante: " + e.getMessage());
            return false; // Si hay un error, no incluimos la reserva
        }
    }

    private void llenarTablaReservas(List<ReservaDTO> reservas) {
        try {
            if (reservas == null || reservas.isEmpty()) {
                System.out.println("No hay reservas disponibles.");
                return; // Salir si no hay reservas
            }

            // Crear un modelo de tabla
            DefaultTableModel modelo = new DefaultTableModel();
            modelo.addColumn("ID Reserva");
            modelo.addColumn("Nombre Completo");
            modelo.addColumn("Teléfono");
            modelo.addColumn("Personas");
            modelo.addColumn("Fecha y Hora");
            modelo.addColumn("Código de Mesa");
            modelo.addColumn("Estado");

            // Llenar el modelo con los datos de las reservas
            for (ReservaDTO reserva : reservas) {
                try {
                    ClienteDTO cliente = clientebo.obtenerClientePorId(reserva.getIdCliente());
                    MesaDTO mesadto = mesabo.obtenerMesaPorId(reserva.getIdMesa());

                    if (cliente != null && mesadto != null) {
                        Object[] fila = new Object[7];
                        fila[0] = reserva.getIdReserva();
                        fila[1] = cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno();
                        fila[2] = cliente.getTelefono();
                        fila[3] = reserva.getNumeroPersonas();
                        fila[4] = reserva.getFechaHora();
                        fila[5] = mesadto.getCodigoMesa();
                        fila[6] = reserva.getEstado();

                        modelo.addRow(fila);
                    } else {
                        System.out.println("Cliente o mesa no encontrados para ID: " + reserva.getIdCliente() + ", " + reserva.getIdMesa());
                    }
                } catch (Exception e) {
                    System.out.println("Error al obtener datos del cliente o mesa: " + e.getMessage());
                }
            }

            // Asignar el modelo a la tabla y configurarla
            tblReservaciones.setModel(modelo);
            tblReservaciones.setFillsViewportHeight(true);
            jScrollPane1.setViewportView(tblReservaciones);

            tblReservaciones.getColumnModel().getColumn(0).setMinWidth(0);
            tblReservaciones.getColumnModel().getColumn(0).setMaxWidth(0);
            tblReservaciones.getColumnModel().getColumn(0).setPreferredWidth(0);
            // Agregar un listener para la selección de filas

            tblReservaciones.getSelectionModel().addListSelectionListener(event -> {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = tblReservaciones.getSelectedRow();
                    if (selectedRow != -1) {
                        String idReservaString = tblReservaciones.getValueAt(selectedRow, 0).toString(); // Asegúrate de que el ID esté en la columna correcta
                        Long idReserva = Long.parseLong(idReservaString);
                        guardarIdReservaSeleccionada(idReserva);

                        try {
                            // Obtener la reserva completa usando el ID
                            ReservaDTO reserva = reservabo.obtenerReservaPorId(idReserva);
                            // Llamar al método para cargar detalles
                            cargarDetallesReserva(reserva);
                        } catch (PersistenciaException e) {
                            JOptionPane.showMessageDialog(this, "Error al obtener detalles de la reserva: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            });

        } catch (Exception e) {
            System.out.println("Error inesperado: " + e.getMessage());
        }
    }

    private void guardarIdReservaSeleccionada(Long idReserva) {
        this.idReservaSeleccionada = idReserva;
    }

    private ClienteDTO obtenerClienteSafe(Long idCliente) {
        try {
            return clientebo.obtenerClientePorId(idCliente);
        } catch (Exception e) {
            System.out.println("Error al obtener cliente para ID: " + idCliente + " - " + e.getMessage());
            return null; // Retorna null en caso de error
        }
    }

    private void filtrarNombre() {
        String textoBuscar = txtNombre.getText().toLowerCase(); // Convierte a minúsculas para comparación
        List<ReservaDTO> reservasFiltradasPorNombre = new ArrayList<>();

        // Filtrar las reservas
        for (ReservaDTO reserva : reservasFiltradas) {
            ClienteDTO cliente = obtenerClienteSafe(reserva.getIdCliente()); // Usa el método auxiliar
            if (cliente != null) {
                String nombreCompleto = (cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno()).toLowerCase();
                if (nombreCompleto.contains(textoBuscar)) {
                    reservasFiltradasPorNombre.add(reserva);
                }
            }
        }

        // Llenar la tabla con las reservas filtradas
        llenarTablaReservas(reservasFiltradasPorNombre);
    }

    private void filtrarFecha() {
        // Obtener la fecha seleccionada del JDateChooser
        java.util.Date fechaSeleccionada = jFecha.getDate();
        List<ReservaDTO> reservasFiltradasPorFecha = new ArrayList<>();

        // Comprobar si se ha seleccionado una fecha
        if (fechaSeleccionada != null) {
            // Obtener el calendario de la fecha seleccionada
            Calendar calendarSeleccionado = Calendar.getInstance();
            calendarSeleccionado.setTime(fechaSeleccionada);
            int añoSeleccionado = calendarSeleccionado.get(Calendar.YEAR);
            int mesSeleccionado = calendarSeleccionado.get(Calendar.MONTH);
            int diaSeleccionado = calendarSeleccionado.get(Calendar.DAY_OF_MONTH);

            // Filtrar las reservas
            for (ReservaDTO reserva : reservasFiltradas) {
                // Suponiendo que tu ReservaDTO tiene un método getFechaHora() que devuelve la fecha de la reserva
                if (reserva.getFechaHora() != null) {
                    Calendar calendarReserva = Calendar.getInstance();
                    calendarReserva.setTime(reserva.getFechaHora());

                    // Comparar solo año, mes y día
                    if (calendarReserva.get(Calendar.YEAR) == añoSeleccionado
                            && calendarReserva.get(Calendar.MONTH) == mesSeleccionado
                            && calendarReserva.get(Calendar.DAY_OF_MONTH) == diaSeleccionado) {
                        reservasFiltradasPorFecha.add(reserva);
                    }
                }
            }
        }

        // Llenar la tabla con las reservas filtradas
        llenarTablaReservas(reservasFiltradasPorFecha);
    }

    private void limpiarFiltros() {
        // Limpiar campos de texto
        txtNombre.setText("");
        txtTelefono.setText("");

        // Limpiar el JDateChooser
        jFecha.setDate(null);

        // Llamar al método que recarga todas las reservas
        cargarReservasEnTabla();
    }

    private void cancelarReserva() throws Exception {
        // Verificar si hay una reserva seleccionada
        if (idReservaSeleccionada != null) {
            try {
                // Obtener el estado actual de la reserva
                String estadoActual = reservabo.obtenerEstadoReservaPorId(idReservaSeleccionada);

                // Verificar si la reserva puede ser cancelada
                if ("Reservado".equalsIgnoreCase(estadoActual)) {
                    // Obtener la reserva
                    ReservaDTO reserva = reservabo.obtenerReservaPorId(idReservaSeleccionada);
                    if (reserva == null) {
                        throw new Exception("Reserva no encontrada con ID: " + idReservaSeleccionada);
                    }

                    // Obtener la fecha y hora actuales
                    Date fechaActual = new Date();
                    long diff = reserva.getFechaHora().getTime() - fechaActual.getTime();
                    long diffHours = diff / (60 * 60 * 1000); // Diferencia en horas

                    BigDecimal multa = BigDecimal.ZERO;
                    String mensajeMulta;

                    // Calcular la multa según el tiempo restante
                    if (diffHours > 48) {
                        mensajeMulta = "No se aplicará ninguna multa.";
                    } else if (diffHours > 24) {
                        multa = reserva.getCosto().multiply(new BigDecimal("0.25"));
                        mensajeMulta = "Se aplicará una multa del 25%: " + multa.toString();
                    } else {
                        multa = reserva.getCosto().multiply(new BigDecimal("0.50"));
                        mensajeMulta = "Se aplicará una multa del 50%: " + multa.toString();
                    }

                    // Mostrar el mensaje de confirmación
                    int respuesta = JOptionPane.showConfirmDialog(this,
                            mensajeMulta + "\n¿Desea continuar con la cancelación?",
                            "Confirmar Cancelación",
                            JOptionPane.YES_NO_OPTION);

                    if (respuesta == JOptionPane.YES_OPTION) {
                        // Realizar la cancelación
                        cancelarReservabo.cancelarReserva(idReservaSeleccionada);
                        JOptionPane.showMessageDialog(this, "Reserva cancelada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        cargarReservasEnTabla(); // Volver a cargar todas las reservas
                    } else {
                        JOptionPane.showMessageDialog(this, "Cancelación de reserva cancelada.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No se puede cancelar una reserva con estado: " + estadoActual, "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } catch (PersistenciaException e) {
                JOptionPane.showMessageDialog(this, "Error al obtener el estado de la reserva: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona una reserva para cancelar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void cargarDetallesReserva(ReservaDTO reserva) {
        try {
            // Obtener el cliente solo una vez para evitar múltiples llamadas
            ClienteDTO cliente = clientebo.obtenerClientePorId(reserva.getIdCliente());

            if (cliente != null) {
                txtNombre.setText(cliente.getNombre() + " " + cliente.getApellidoPaterno() + " " + cliente.getApellidoMaterno());
                txtTelefono.setText(cliente.getTelefono());
                programmaticallySettingDate = true;
                jFecha.setDate(reserva.getFechaHora()); // Asumiendo que tienes un método para obtener la fecha
                programmaticallySettingDate = false;
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el cliente para la reserva seleccionada.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
